{"version":3,"file":"component---src-pages-mint-tsx-9e149334afd58bc09028.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/_version.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/address.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/array.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/null.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/number.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/string.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/fragments.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/abi-coder.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/abi/lib.esm/interface.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/contracts/lib.esm/index.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/contracts/lib.esm/_version.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/units/lib.esm/index.js","webpack://gatsby-starter-default/./node_modules/@ethersproject/units/lib.esm/_version.js","webpack://gatsby-starter-default/./src/components/TicketView.tsx","webpack://gatsby-starter-default/./src/hooks/useShuffleOne.ts","webpack://gatsby-starter-default/./src/utils/globals.tsx","webpack://gatsby-starter-default/./src/pages/mint.tsx"],"sourcesContent":["export const version = \"abi/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() {\n        return hexConcat(this._data);\n    }\n    get length() { return this._dataLength; }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData(concat(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc, allowLoose) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, value) {\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    constructor(coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n//# sourceMappingURL=array.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n//# sourceMappingURL=boolean.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, value) {\n        let data = arrayify(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes([]);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n//# sourceMappingURL=null.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        this.size = size;\n        this.signed = signed;\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, value) {\n        let v = BigNumber.from(value);\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        }\n        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    }\n    decode(reader) {\n        let value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    }\n}\n//# sourceMappingURL=number.js.map","\"use strict\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { DynamicBytesCoder } from \"./bytes\";\nexport class StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, value) {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n//# sourceMappingURL=string.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\nlet ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (let key in params) {\n        defineReadOnly(object, key, params[key]);\n    }\n}\nexport const FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\nexport class Fragment {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n}\nexport class EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nexport class ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\nexport class FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"function\" };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\nexport class ErrorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n        };\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n    static fromString(value) {\n        let params = { type: \"error\" };\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n    static isErrorFragment(value) {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n//# sourceMappingURL=fragments.js.map","\"use strict\";\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n    constructor(coerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data, allowLoose) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    getDefaultValue(types) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data, loose) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\nexport const defaultAbiCoder = new AbiCoder();\n//# sourceMappingURL=abi-coder.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        if (typeof (name) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n        }\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"value\",\n                    value\n                }));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => __awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        if (ro.customData) {\n            tx.customData = shallowCopy(ro.customData);\n        }\n        if (ro.ccipReadEnabled) {\n            tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n        }\n        // Remove the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        delete overrides.customData;\n        delete overrides.ccipReadEnabled;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations) => {\n        return wait(confirmations).then((receipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event = deepCopy(log);\n                let parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                }\n                catch (e) { }\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data, topics) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = () => { return contract.provider; };\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nexport class BaseContract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${name}`]) {\n                    uniqueNames[`%${name}`] = [];\n                }\n                uniqueNames[`%${name}`].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    defineReadOnly(this, name, this[signature]);\n                }\n            }\n            catch (e) { }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nexport class Contract extends BaseContract {\n}\nexport class ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            // Add the modified wait that wraps events\n            addContractWait(contract, tx);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n//# sourceMappingURL=index.js.map","export const version = \"contracts/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    }\n    else {\n        value = whole + \".\" + fraction;\n    }\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexport function parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") {\n        fraction = \"0\";\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nexport class FixedFormat {\n    constructor(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        if (typeof (value) === \"number\") {\n            value = `fixed128x${value}`;\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            const check = (key, type, defaultValue) => {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\nexport class FixedNumber {\n    constructor(constructorGuard, hex, value, format) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    floor() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    ceiling() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n    isZero() {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n    isNegative() {\n        return (this._value[0] === \"-\");\n    }\n    toString() { return this._value; }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map","\"use strict\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return formatFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n    if (typeof (value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return parseFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=index.js.map","export const version = \"units/5.7.0\";\n//# sourceMappingURL=_version.js.map","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { useShuffleOne } from \"../hooks/useShuffleOne\";\n\nimport { ethers } from \"ethers\"\nimport { useWeb3Context } from \"../context/Web3\";\n\ntype Props = {}\n\nconst TicketView = ({ }: Props) => {\n  const [web3] = useWeb3Context();\n  const shuffleOne = useShuffleOne();\n\n  const [canBuy, setCanBuy] = useState(false);\n  const [canMint, setCanMint] = useState(false);\n  const [canRequestRandomness, setCanRequestRandomness] = useState(false);\n\n  const [buyTransaction, setBuyTransaction] = useState();\n  const [mintTransaction, setMintTransaction] = useState();\n  const [randomnessTransaction, setRandomnessTransaction] = useState();\n  const [ticketsLeft, setTicketsLeft] = useState(-1);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const isOpen = await shuffleOne.isRaffleOpen();\n        const requestedRandomness = await shuffleOne.getRequestId();\n        const entropy = await shuffleOne.entropy();\n        const maxPerAddress = await shuffleOne.MAX_PER_ADDRESS();\n        const userTicket = await shuffleOne.participants(web3.wallet);\n  \n        // Ticket left\n        const ticketsSold = await shuffleOne.getSoldTickets();\n        const maxSupply = await shuffleOne.AVAILABLE_SUPPLY();\n        const ticketLeft = maxSupply.sub(ticketsSold).toString();\n        setTicketsLeft(ticketLeft);\n  \n        // Can buy ?\n        setCanBuy(isOpen && (maxPerAddress.gt(userTicket.ownedTickets)));\n  \n        // Can mint ?\n        setCanMint(\n          !isOpen // Raffle is closed\n          && userTicket.minted.lt(userTicket.ownedTickets) // User has nfts to mint\n          && !requestedRandomness.isZero() // Randomness has not been \n          && !entropy.isZero() // Has entropy\n        );\n  \n        // Can request randomness\n        setCanRequestRandomness(requestedRandomness.isZero() && entropy.isZero() && (ticketLeft == 0));\n  \n        console.log({\n          isOpen,\n          requestedRandomness,\n          entropy,\n          maxPerAddress,\n          userTicket,\n          ticketsSold,\n          maxSupply,\n          canBuy,\n          canMint,\n          cal: maxPerAddress.gt(userTicket.ownedTickets),\n        });\n      } catch (e) {\n        console.log(e);\n      };\n    })();\n  }, [buyTransaction, mintTransaction, randomnessTransaction, web3]);\n\n  const BuyTicketButton = () => {\n    const buyTicketHandle = async () => {\n      try {\n        const response = await shuffleOne.buyTicket({ value: ethers.utils.parseEther(\"0.2\") });\n        const receipt = await response.wait();\n        setBuyTransaction(receipt);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    return (\n      <Button onClick={() => { buyTicketHandle() }}> Buy ticket </Button>\n    );\n  };\n\n  const MintTokenButton = () => {\n    const mintTokenHandle = async () => {\n      try {\n        const response = await shuffleOne.mint();\n        const receipt = await response.wait();\n        setMintTransaction(receipt);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    return (\n      <Button onClick={() => { mintTokenHandle() }}> Mint token </Button>\n    );\n  };\n\n  const RequestRandomnessButton = () => {\n    const requestRandomnessHandle = async () => {\n      try {\n        const response = await shuffleOne.requestRandomness();\n        const receipt = await response.wait();\n        setRandomnessTransaction(receipt);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    return (\n      <Button onClick={() => { requestRandomnessHandle() }}> Request randomness </Button>\n    );\n  };\n\n  return (\n    <>\n      {(ticketsLeft > 0) ? `Tickets left ${ticketsLeft}` : 'Sold out !!!!'}\n      <div>\n        { \n          canBuy && <BuyTicketButton /> \n          || canMint && <MintTokenButton /> \n          || canRequestRandomness && <RequestRandomnessButton />\n        }\n      </div>\n      {(!canBuy && !canMint && !canRequestRandomness) && 'On hoooodl !'}\n    </>\n  );\n};\n\nexport { TicketView };","import React from \"react\";\nimport { Contract } from \"ethers\";\nimport { GLOBALS } from \"../utils/globals\";\nimport shuffleOne from \"../../../deployments/localhost/ShuffleOne.json\";\n\nimport { useWeb3Context } from \"../context/Web3\";\n\nconst useShuffleOne = () => {\n  const [ web3 ] = useWeb3Context();\n\n  const shuffleOneAddress = shuffleOne.address\n\n  const provider = web3.writeProvider ? web3.writeProvider.getSigner() : web3.readProvider;\n  const contract = new Contract(shuffleOneAddress, shuffleOne.abi, provider);\n\n  return contract;\n};\n\nexport { useShuffleOne };","\n\ntype GLOBALS = {\n  INFURA_APIKEY: string;\n  CONTRACT_ADDRESSES: { shuffleOne: {} };\n}\nconst GLOBALS: GLOBALS = {\n  INFURA_APIKEY:  \"aebcaf12b8f848048529c2682a65917e\",\n  CONTRACT_ADDRESSES: {\n    shuffleOne: {\n      // 1: '',\n      5: '0x0F05cfa6461741801b7399Fe644B4F1d7d426132',\n      31337: '0x0165878A594ca255338adfa4d48449f69242Eb8F',\n    }\n  }\n};\n\n\nexport { GLOBALS };","import Box from '@mui/material/Box';\nimport React from 'react';\n\nimport { useWeb3Context } from '../context/Web3';\nimport { TicketView } from '../components/TicketView';\nimport { GLOBALS } from '../utils/globals';\n\nimport Seo from '../components/seo';\nimport Layout from '../components/layout';\n\nconst Mint = () => {\n  const [ web3 ] = useWeb3Context();\n\n  const isNetworkSupported = () => {\n    const supportedNetworks = Object.keys(GLOBALS.CONTRACT_ADDRESSES.shuffleOne);\n    return supportedNetworks.includes(String(web3.chainId));\n  };\n  return (\n    <Layout>\n      <Seo>\n        <h1> MINT </h1>\n        { web3.isConnected ? isNetworkSupported() ? <TicketView /> : 'Please select a supported network' : \n        'Please connect wallet' }\n      </Seo>\n    </Layout>\n  );\n};\n\nexport default Mint;\n\n"],"names":["version","logger","Coder","constructor","name","type","localName","dynamic","this","_throwError","message","value","throwArgumentError","Writer","wordSize","_data","_dataLength","_padding","Uint8Array","data","length","_writeData","push","appendWriter","writer","writeBytes","bytes","paddingOffset","slice","_getValue","throwError","offset","writeValue","writeUpdatableValue","Reader","coerceFunc","allowLoose","_offset","consumed","static","match","parseInt","toNumber","coerce","_coerceFunc","_peekBytes","loose","alignedLength","Math","ceil","subReader","readBytes","readValue","AddressCoder","super","defaultValue","encode","error","decode","reader","toHexString","AnonymousCoder","coder","undefined","pack","coders","values","arrayValues","Array","isArray","unique","map","argument","staticWriter","dynamicWriter","updateFuncs","forEach","index","dynamicOffset","updateFunc","baseOffset","func","unpack","baseReader","offsetReader","code","baseType","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","i","freeze","ArrayCoder","defaultChild","result","count","checkArgumentCount","BooleanCoder","isZero","DynamicBytesCoder","BytesCoder","FixedBytesCoder","size","String","substring","NullCoder","NumberCoder","signed","v","maxUintValue","bounds","mask","gt","lt","add","mul","toTwos","fromTwos","StringCoder","TupleCoder","types","join","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","indexOf","populate","object","params","key","FormatTypes","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","operation","arrayLength","arrayChildren","fromObject","components","_isParamType","format","indexed","comp","JSON","parse","stringify","allowIndexed","fromString","isParamType","verifyType","node","param","originalParam","newNode","parent","state","allowType","replace","c","allowParams","child","allowName","allowArray","sibling","readArray","parseParamType","parseParams","allowIndex","trim","depth","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","split","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","isConstructorFragment","parens","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","isErrorFragment","regexIdentifier","paramTypeBytes","paramTypeNumber","defaultAbiCoder","_getCoder","component","_getWordSize","_getReader","_getWriter","getDefaultValue","from","LogDescription","TransactionDescription","ErrorDescription","Indexed","_isIndexed","BuiltinErrors","signature","reason","wrapAccessError","property","wrap","Interface","fragments","abi","filter","bucket","deploy","functions","events","errors","j","address","id","eventFragment","getFunction","nameOrSignatureOrSighash","getSighash","matching","keys","f","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","getError","_","_decodeParams","_abiCoder","_encodeParams","encodeDeploy","decodeErrorResult","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","errorArgs","errorName","errorSignature","selector","builtin","method","encodeFunctionResult","encodeFilterTopics","topics","encodeTopic","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","parseTransaction","tx","args","parseLog","topic","parseError","hexData","errorFragment","_isInterface","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","apply","resolveName","resolver","nameOrPromise","resolveAddresses","paramType","all","makeError","populateTransaction","contract","overrides","signer","override","getAddress","check","provider","resolved","resolvedAddress","interface","to","ro","nonce","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","accessList","intrinsic","roValue","customData","ccipReadEnabled","leftovers","l","addContractWait","wait","bind","confirmations","receipt","logs","event","parsed","eventSignature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","buildCall","collapseSimple","signerOrProvider","blockTag","deployTransaction","_deployed","call","transaction","buildDefault","txRequest","sendTransaction","buildSend","getEventTag","RunningEvent","tag","_listeners","addListener","listener","once","item","removeAllListeners","listeners","listenerCount","run","argsCopy","setTimeout","prepareEvent","getEmit","ErrorRunningEvent","FragmentRunningEvent","contractInterface","decodeError","checkErrors","path","childPath","checkResultErrors","WildcardRunningEvent","BaseContract","addressOrName","uniqueFilters","filters","catch","uniqueSignatures","callStatic","buildPopulate","estimateGas","buildEstimate","signatures","isInterface","deployed","_deployedPromise","getCode","contractAddress","fallback","connect","attach","isIndexed","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_addEventListener","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","fromBlock","getLogs","Contract","Zero","NegativeOne","throwFault","fault","zeros","getMultiplier","decimals","multiplier","negative","fraction","mod","whole","div","parseFixed","wholeValue","fractionValue","wei","FixedFormat","width","_multiplier","FixedNumber","hex","_hex","_value","_isFixedNumber","_checkFormat","other","addUnsafe","a","b","fromValue","subUnsafe","sub","mulUnsafe","divUnsafe","floor","hasFraction","isNegative","ONE","toFormat","ceiling","round","factor","bump","BUMP","toUnsafeFloat","parseFloat","fixedFormat","numeric","decimal","fromBytes","names","parseEther","ether","unitName","parseUnits","TicketView","_ref","web3","useWeb3Context","shuffleOne","shuffleOneAddress","writeProvider","getSigner","readProvider","useShuffleOne","canBuy","setCanBuy","useState","canMint","setCanMint","canRequestRandomness","setCanRequestRandomness","buyTransaction","setBuyTransaction","mintTransaction","setMintTransaction","randomnessTransaction","setRandomnessTransaction","ticketsLeft","setTicketsLeft","useEffect","isOpen","isRaffleOpen","requestedRandomness","getRequestId","entropy","maxPerAddress","MAX_PER_ADDRESS","userTicket","participants","wallet","ticketsSold","getSoldTickets","maxSupply","AVAILABLE_SUPPLY","ticketLeft","ownedTickets","minted","cal","BuyTicketButton","React","Button","onClick","async","response","buyTicket","ethers","buyTicketHandle","MintTokenButton","mint","mintTokenHandle","RequestRandomnessButton","requestRandomness","requestRandomnessHandle","GLOBALS","Layout","Seo","isConnected","includes","chainId"],"sourceRoot":""}